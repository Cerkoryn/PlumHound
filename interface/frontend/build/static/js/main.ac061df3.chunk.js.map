{"version":3,"sources":["components/Nav.tsx","components/List.tsx","components/Tasks/AnalyzeTask.tsx","components/Table.tsx","components/Tasks/BusiestTask.tsx","components/Tasks/QueryTask.tsx","components/TaskContainer.tsx","App.tsx","index.tsx"],"names":["PlumHoundNav","bg","w","px","py","justifyContent","alignItems","flexDirection","src","h","rounded","pl","color","fontSize","PlumHoundList","props","boxShadow","borderWidth","borderColor","alignSelf","borderBottom","size","heading","children","PlumHoundAnalyzeTask","task","useState","selected","setSelected","position","top","left","index","zIndex","maxH","overflow","results","map","data","i","onClick","cursor","nodes","id","PlumHoundGraph","current","links","filter","l","actionables","some","a","source","b","target","concat","label","rel","title","config","nodeHighlightBehavior","node","highlightStrokeColor","link","highlightColor","renderLabel","width","height","directed","PlumHoundTable","keys","values","colorScheme","key","row","value","isNumeric","PlumHoundBusiestTask","PlumHoundQueryTask","result","PlumHoundTaskContainer","minH","marginLeft","minW","padding","margin","type","App","setResults","chosenTaskIndex","setChosenTaskIndex","useEffect","reloadReports","fetch","then","r","json","ress","pt","tasks","paddingLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac061df3.chunk.js","sourcesContent":["import { Flex, Image, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nexport const PlumHoundNav = () => {\n  return (\n    <Flex\n      bg='#A41E63'\n      w='100%'\n      px={4}\n      py={3}\n      justifyContent='space-between'\n      alignItems=\"center\"\n    >\n      <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\n        <Image src='static/logo.png' h={10} rounded='full' /> \n        <Text pl={4} color=\"white\" fontSize='2xl'>PlumHound</Text>\n      </Flex>\n    </Flex>\n  )\n}","import { Box, Center, Heading, List } from '@chakra-ui/react';\nimport React from 'react';\n\ntype Props = React.PropsWithChildren<{\n  heading: string,\n}>\nexport const PlumHoundList = (props: Props) => {\n  return (\n    <Box\n      w='200px'\n      h='800px'\n      rounded='12px'\n      boxShadow='sm'\n      borderWidth='1px'\n      borderColor='gray.900'\n      alignSelf='flex-start'\n      >\n      <Center borderBottom='1px'>\n        <Heading size='md'>{props.heading}</Heading>\n      </Center>\n      <List>\n        {props.children}\n      </List>\n    </Box>\n  )\n}","import { Result } from '../../types';\nimport { Graph, GraphConfiguration, GraphData, GraphNode, GraphLink } from 'react-d3-graph';\nimport { useState } from 'react';\nimport { Box, Container, List, ListItem } from '@chakra-ui/react';\n\nexport const PlumHoundAnalyzeTask = ({task}: {task: Result<'analyze_path'>}) => {\n  const [selected, setSelected] = useState(0);\n  return (\n    <Box\n      w='100%'\n      position='relative'\n    >\n      <Container\n        position='absolute'\n        top='0'\n        left='-4'\n      >\n        <PlumHoundGraph\n          task={task}\n          index={selected}\n        />\n      </Container>\n\n      <List\n        position='absolute'\n        top='3'\n        left='3'\n        zIndex='999'\n        maxH='750px'\n        overflow='auto'\n      >\n        {task.results.map((data, i) => (\n          <ListItem\n            key={i}\n            bg={selected === i ? 'rgba(0,0,0,0.15)' : ''}\n            onClick={() => setSelected(i)}\n            cursor='pointer'\n            fontSize='sm'\n          >\n            Path {i + 1} {data.nodes[0].id}\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nconst PlumHoundGraph = ({task, index}: {task: Result<'analyze_path'>, index: number}) => {\n  const current = task.results[index];\n\n  if(!current) return <></>;\n\n\n\n  const data: GraphData<GraphNode, GraphLink> = {\n    nodes: current.nodes,\n    links: current.links\n      .filter(l => !current.actionables.some(a => a.a === l.source && a.b === l.target))\n      .concat(current.actionables.map(a => ({source:a.a, target:a.b, label: a.rel}))),\n  }\n\n  const myConfig: Partial<GraphConfiguration<GraphNode, GraphLink>> = {\n    nodeHighlightBehavior: true,\n    node: {\n      color: \"lightgreen\",\n      size: 120,\n      highlightStrokeColor: \"blue\",\n    },\n    link: {\n      highlightColor: \"lightblue\",\n      renderLabel: true,\n    },\n    width: 1200,\n    height: 773,\n    directed: true,\n  };\n\n  return (\n    <Graph\n      id={task.title}\n      data={data}\n      config={myConfig}\n    />\n  );\n}\n","import { Table, Thead, Tbody, Tr, Th, Td } from \"@chakra-ui/react\"\n\nexport const PlumHoundTable = <T extends string>({keys, values}: {keys: T[], values: Record<T, string | number>[]}) => {\n  return (\n    <Table size='sm' colorScheme='gray'>\n      <Thead>\n        <Tr>\n          {keys.map(key => (\n            <Th key={key}>\n              {key}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n      {values.map(row => (\n        <Tr>\n          {keys.map(key => {\n            const value = row[key];\n            if(typeof value === 'string'){\n              return <Td>{value}</Td>;\n            } else {\n              return <Td isNumeric={true}>{value}</Td>;\n            }\n          })}\n        </Tr>\n      ))}\n      </Tbody>\n    </Table>\n  )\n}","import { PlumHoundTable } from '../Table';\nimport { Result } from '../../types';\nimport { Center } from '@chakra-ui/react';\n\nexport const PlumHoundBusiestTask = ({task}: {task: Result<'busiest_path'>}) => {\n  return (\n    <Center>\n      <PlumHoundTable keys={['name', 'count']} values={task.results} />\n    </Center>\n  );\n}","import { PlumHoundTable } from '../Table';\nimport { Result } from '../../types';\nimport { Center } from '@chakra-ui/react';\n\nexport const PlumHoundQueryTask = ({task}: {task: Result<'query'>}) => {\n  return (\n    <Center>\n      <PlumHoundTable keys={task.results.keys} values={task.results.result} />\n    </Center>\n  );\n}","import { Box, Center, Container, Heading } from '@chakra-ui/react';\nimport { PlumHoundAnalyzeTask } from './Tasks/AnalyzeTask';\nimport { PlumHoundBusiestTask } from './Tasks/BusiestTask';\nimport { PlumHoundQueryTask } from './Tasks/QueryTask';\nimport { AnyResult, Result } from '../types';\n\ntype Props = {\n  task: AnyResult | undefined\n}\nexport const PlumHoundTaskContainer = ({ task }: Props) => {\n  return (\n    <Box\n      w='1200px'\n      minH='800px'\n      rounded='12px'\n      boxShadow='sm'\n      borderWidth='1px'\n      borderColor='gray.900'\n      marginLeft='50px'\n    >\n      <Center borderBottom='1px'>\n        <Heading size='md'>{task?.title || 'Select a Task'}</Heading>\n      </Center>\n      <Container minW='100%' padding='0' margin='0'>\n        {(()=>{\n          switch(task?.type){\n            case 'analyze_path':\n              return <PlumHoundAnalyzeTask task={task as Result<'analyze_path'>} />;\n            case 'busiest_path':\n              return <PlumHoundBusiestTask task={task as Result<'busiest_path'>} />;\n            case 'query':\n              return <PlumHoundQueryTask task={task as Result<'query'>} />;\n            default:\n              return '';\n          }\n        })()}\n      </Container>\n    </Box>\n  )\n}","import { ChakraProvider, Flex, ListItem } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { PlumHoundNav } from './components/Nav';\nimport { PlumHoundList } from './components/List';\nimport { PlumHoundTaskContainer } from './components/TaskContainer';\nimport { Report } from './types';\n\n\n\nfunction App() {\n  const [results, setResults] = useState<Report | undefined>();\n  const [chosenTaskIndex, setChosenTaskIndex] = useState<number>(-1);\n\n  useEffect(() => {\n    reloadReports();\n  }, []);\n\n  const reloadReports = async () => { // wrapped like this because effects have a poor type declaration\n    const ress = await fetch('/api/tasks').then(r => r.json());\n    setResults(ress);\n    setChosenTaskIndex(0);\n  }\n\n  return (\n    <ChakraProvider>\n      <PlumHoundNav />\n      <Flex\n        w=\"100%\"\n        pt={10}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <PlumHoundList heading='Tasks'>\n          {\n            results && results.tasks ? \n              results.tasks.map((result, i) => {\n                return (\n                  <ListItem\n                    key={i}\n                    bg={chosenTaskIndex === i ? 'rgba(0,0,0,0.15)' : ''}\n                    onClick={() => setChosenTaskIndex(i)}\n                    cursor='pointer'\n                    borderBottom='1px'\n                    borderColor='lightgray'\n                    paddingLeft='5px'\n                  >\n                    {result.title}\n                  </ListItem>\n                )\n              }) :\n              <ListItem\n                onClick={reloadReports}\n                cursor='pointer'\n                borderBottom='1px'\n                borderColor='lightgray'\n                paddingLeft='5px'\n                title='Click reload!'\n              >\n                No tasks\n              </ListItem>\n          }\n        </PlumHoundList>\n        <PlumHoundTaskContainer task={results?.tasks[chosenTaskIndex]} />\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}